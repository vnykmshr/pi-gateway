# Pi Gateway Setup Configuration Template
# Customize these settings for your homelab environment
#
# Usage: Copy to setup.conf and modify as needed
# Generated by Pi Gateway Master Setup Script

#=============================================================================
# Core Component Configuration
#=============================================================================

# Enable or disable major components
ENABLE_SSH=true                    # SSH hardening and key-based authentication
ENABLE_VPN=true                    # WireGuard VPN server setup
ENABLE_FIREWALL=true               # Advanced firewall configuration
ENABLE_REMOTE_DESKTOP=false        # VNC/RDP remote desktop (optional)
ENABLE_DDNS=false                  # Dynamic DNS setup (optional)

#=============================================================================
# Network Port Configuration
#=============================================================================

# SSH Configuration
SSH_PORT=2222                      # Custom SSH port (security through obscurity)
SSH_KEY_TYPE="ed25519"             # Key type: ed25519 (recommended) or rsa
SSH_KEY_BITS=4096                  # RSA key size (if using RSA)

# VPN Configuration
VPN_PORT=51820                     # WireGuard VPN port
VPN_NETWORK="10.13.13.0/24"        # VPN network range
VPN_SERVER_IP="10.13.13.1/24"      # VPN server IP address
VPN_DNS_SERVERS="1.1.1.1,1.0.0.1"  # DNS servers for VPN clients

# Remote Desktop Configuration
VNC_PORT=5900                      # VNC port (Display :1)
VNC_GEOMETRY="1920x1080"           # VNC resolution
VNC_DEPTH=24                       # VNC color depth
RDP_PORT=3389                      # RDP port

#=============================================================================
# Security Configuration
#=============================================================================

# Firewall Settings
FIREWALL_DEFAULT_POLICY="deny"     # Default incoming policy
FIREWALL_ENABLE_LOGGING=true       # Enable connection logging
FIREWALL_RATE_LIMITING=true        # Enable SSH rate limiting

# Fail2ban Settings
FAIL2BAN_ENABLED=true               # Enable intrusion detection
FAIL2BAN_BAN_TIME=3600             # Ban duration in seconds (1 hour)
FAIL2BAN_MAX_RETRY=3               # Maximum failed attempts
FAIL2BAN_FIND_TIME=600             # Time window for attempts (10 minutes)

#=============================================================================
# Dynamic DNS Configuration
#=============================================================================

# DDNS Provider (duckdns, noip, cloudflare, freedns, namecheap)
DDNS_PROVIDER="duckdns"             # Default provider
DDNS_UPDATE_INTERVAL=300           # Update check interval (5 minutes)
DDNS_HOSTNAME=""                   # Your DDNS hostname
DDNS_TOKEN=""                      # Provider token/password

# DuckDNS Specific Settings
DUCKDNS_DOMAIN=""                  # Your DuckDNS domain (e.g., myhome.duckdns.org)
DUCKDNS_TOKEN=""                   # Your DuckDNS token

# No-IP Specific Settings
NOIP_USERNAME=""                   # Your No-IP username
NOIP_PASSWORD=""                   # Your No-IP password
NOIP_HOSTNAME=""                   # Your No-IP hostname

# Cloudflare Specific Settings
CLOUDFLARE_EMAIL=""                # Your Cloudflare email
CLOUDFLARE_API_KEY=""              # Your Cloudflare API key
CLOUDFLARE_DOMAIN=""               # Your domain name

#=============================================================================
# System Configuration
#=============================================================================

# User Configuration
PRIMARY_USER="pi"                  # Primary user account
PRIMARY_USER_GROUPS="sudo,adm,dialout,cdrom,floppy,audio,dip,video,plugdev,netdev"

# Service Configuration
ENABLE_AUTO_UPDATES=true           # Enable automatic security updates
ENABLE_LOG_ROTATION=true           # Enable log rotation
LOG_RETENTION_DAYS=30              # Keep logs for 30 days

# Performance Settings
OPTIMIZE_FOR_PI_MODEL=""           # Auto-detect or specify (pi3, pi4, pi5)
ENABLE_SWAP=false                  # Enable swap file (not recommended for SD cards)
SWAP_SIZE="1024"                   # Swap size in MB

#=============================================================================
# Backup and Monitoring Configuration
#=============================================================================

# Backup Settings
BACKUP_ENABLED=true                # Enable configuration backups
BACKUP_LOCATION="/var/backups/pi-gateway"  # Backup directory
BACKUP_RETENTION_DAYS=30           # Keep backups for 30 days
BACKUP_COMPRESSION=true            # Compress backup files

# Monitoring Settings
ENABLE_MONITORING=true             # Enable service monitoring
MONITORING_INTERVAL=60             # Check interval in seconds
ENABLE_EMAIL_ALERTS=false          # Email alerts (requires mail setup)
ALERT_EMAIL=""                     # Email address for alerts

#=============================================================================
# Advanced Configuration
#=============================================================================

# Installation Behavior
INTERACTIVE_MODE=true              # Allow interactive prompts
VERBOSE_LOGGING=false              # Enable verbose logging
CONTINUE_ON_ERROR=false            # Continue setup if non-critical errors occur
SKIP_PACKAGE_UPDATE=false          # Skip initial package update

# Development and Testing
DRY_RUN=false                      # Test mode without system changes
ENABLE_DEBUG_LOGGING=false         # Enable debug output
MOCK_HARDWARE=false                # Use mock hardware detection

#=============================================================================
# Custom Script Paths
#=============================================================================

# Override default script locations if needed
# (Leave empty to use defaults)
CUSTOM_REQUIREMENTS_SCRIPT=""      # Custom requirements checker
CUSTOM_DEPENDENCIES_SCRIPT=""      # Custom dependency installer
CUSTOM_HARDENING_SCRIPT=""         # Custom hardening script
CUSTOM_SSH_SCRIPT=""              # Custom SSH setup script
CUSTOM_VPN_SCRIPT=""              # Custom VPN setup script
CUSTOM_FIREWALL_SCRIPT=""         # Custom firewall script
CUSTOM_REMOTE_DESKTOP_SCRIPT=""   # Custom remote desktop script
CUSTOM_DDNS_SCRIPT=""             # Custom DDNS script

#=============================================================================
# Environment-Specific Overrides
#=============================================================================

# Production Environment
if [[ "${ENVIRONMENT:-}" == "production" ]]; then
    ENABLE_REMOTE_DESKTOP=false
    ENABLE_DEBUG_LOGGING=false
    CONTINUE_ON_ERROR=false
    VERBOSE_LOGGING=false
fi

# Development Environment
if [[ "${ENVIRONMENT:-}" == "development" ]]; then
    ENABLE_DEBUG_LOGGING=true
    VERBOSE_LOGGING=true
    DRY_RUN=true
fi

# Testing Environment
if [[ "${ENVIRONMENT:-}" == "testing" ]]; then
    DRY_RUN=true
    MOCK_HARDWARE=true
    ENABLE_DEBUG_LOGGING=true
fi

#=============================================================================
# Validation Functions
#=============================================================================

# Validate port numbers
validate_ports() {
    local ports=("$SSH_PORT" "$VPN_PORT" "$VNC_PORT" "$RDP_PORT")
    for port in "${ports[@]}"; do
        if [[ ! "$port" =~ ^[1-9][0-9]{0,4}$ ]] || [[ "$port" -gt 65535 ]]; then
            echo "Error: Invalid port number: $port"
            return 1
        fi
    done
}

# Validate network configuration
validate_network() {
    if [[ ! "$VPN_NETWORK" =~ ^[0-9]{1,3}\.[0-9]{1,3}\.[0-9]{1,3}\.[0-9]{1,3}/[0-9]{1,2}$ ]]; then
        echo "Error: Invalid VPN network format: $VPN_NETWORK"
        return 1
    fi
}

# Validate email format
validate_email() {
    if [[ -n "$ALERT_EMAIL" ]] && [[ ! "$ALERT_EMAIL" =~ ^[a-zA-Z0-9._%+-]+@[a-zA-Z0-9.-]+\.[a-zA-Z]{2,}$ ]]; then
        echo "Error: Invalid email format: $ALERT_EMAIL"
        return 1
    fi
}

# Run all validations
validate_config() {
    validate_ports && validate_network && validate_email
}

#=============================================================================
# Usage Examples
#=============================================================================

# Example 1: Basic Home Setup
# ENABLE_SSH=true
# ENABLE_VPN=true
# ENABLE_FIREWALL=true
# ENABLE_REMOTE_DESKTOP=true
# ENABLE_DDNS=true
# DDNS_PROVIDER="duckdns"
# DUCKDNS_DOMAIN="myhome.duckdns.org"
# DUCKDNS_TOKEN="your-token-here"

# Example 2: Security-Focused Setup
# ENABLE_SSH=true
# ENABLE_VPN=true
# ENABLE_FIREWALL=true
# ENABLE_REMOTE_DESKTOP=false
# ENABLE_DDNS=false
# SSH_PORT=2222
# FAIL2BAN_MAX_RETRY=2
# FAIL2BAN_BAN_TIME=7200

# Example 3: Development Setup
# ENVIRONMENT="development"
# DRY_RUN=true
# VERBOSE_LOGGING=true
# ENABLE_DEBUG_LOGGING=true
# MOCK_HARDWARE=true

#=============================================================================
# Configuration Notes
#=============================================================================

# 1. Security Considerations:
#    - Use strong, unique passwords for all services
#    - Consider disabling remote desktop for production
#    - Keep DDNS tokens secure and rotate regularly
#    - Monitor logs for suspicious activity

# 2. Network Configuration:
#    - Ensure port forwarding is configured on your router
#    - Use non-standard ports for security through obscurity
#    - Consider using VPN for all external access

# 3. Performance Optimization:
#    - Disable unnecessary services for better performance
#    - Consider swap settings based on your Pi model and storage
#    - Monitor resource usage after installation

# 4. Maintenance:
#    - Regularly update the system and Pi Gateway
#    - Review and rotate credentials periodically
#    - Monitor service health and logs
#    - Test backup and restore procedures

#=============================================================================
# Support and Documentation
#=============================================================================

# For more information and troubleshooting:
# - Check the Pi Gateway documentation
# - Review log files in /var/log/
# - Use the built-in health check scripts
# - Consult the community forums for support