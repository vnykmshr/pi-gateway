#!/bin/bash
# Pi Gateway VNC Session Startup Script Template
# Customizable desktop environment startup for VNC sessions
#
# Usage: Copy to ~/.vnc/xstartup and customize for your needs
# Generated by Pi Gateway Remote Desktop Setup Script

#=============================================================================
# Session Initialization
#=============================================================================

# Uncomment to enable debug logging
# set -x
# exec 2> ~/.vnc/xstartup.log

# Kill any existing VNC desktop
vncserver -kill $DISPLAY >/dev/null 2>&1 || true

# Clean up temporary files
rm -f /tmp/.X*-lock /tmp/.X11-unix/X* >/dev/null 2>&1 || true

# Set up environment
export USER="${USER:-pi}"
export HOME="${HOME:-/home/pi}"
export SHELL="${SHELL:-/bin/bash}"

# Source system profile
[ -r /etc/profile ] && . /etc/profile

# Source user profile
[ -r ~/.profile ] && . ~/.profile

# Set up display
export DISPLAY="${DISPLAY:-:1}"

#=============================================================================
# Desktop Background and Appearance
#=============================================================================

# Set solid color background (faster than image)
xsetroot -solid "#2E3440" &

# Alternative: Set wallpaper image
# xsetroot -bitmap ~/.vnc/wallpaper.xbm &
# feh --bg-scale ~/.vnc/wallpaper.jpg &

# Set cursor theme
xsetroot -cursor_name left_ptr &

# Load X resources (colors, fonts, etc.)
[ -r ~/.Xresources ] && xrdb ~/.Xresources &

#=============================================================================
# Desktop Environment Selection
#=============================================================================

# Automatically detect and start appropriate desktop environment
start_desktop_environment() {
    # LXDE (Lightweight X11 Desktop Environment)
    if command -v startlxde >/dev/null 2>&1; then
        echo "Starting LXDE desktop environment"
        exec startlxde

    # LXDE alternative startup
    elif command -v lxsession >/dev/null 2>&1; then
        echo "Starting LXDE session"
        exec lxsession -s LXDE -e LXDE

    # XFCE Desktop Environment
    elif command -v startxfce4 >/dev/null 2>&1; then
        echo "Starting XFCE desktop environment"
        exec startxfce4

    # GNOME Desktop Environment
    elif command -v gnome-session >/dev/null 2>&1; then
        echo "Starting GNOME desktop environment"
        exec gnome-session

    # KDE Plasma Desktop
    elif command -v startkde >/dev/null 2>&1; then
        echo "Starting KDE desktop environment"
        exec startkde

    # Fallback: Manual component startup
    else
        echo "No desktop environment found, starting manual session"
        start_manual_session
    fi
}

# Manual session startup (fallback)
start_manual_session() {
    # Start window manager
    if command -v openbox >/dev/null 2>&1; then
        openbox &
    elif command -v fluxbox >/dev/null 2>&1; then
        fluxbox &
    elif command -v icewm >/dev/null 2>&1; then
        icewm &
    elif command -v xfwm4 >/dev/null 2>&1; then
        xfwm4 &
    else
        xterm &
    fi

    # Start file manager
    if command -v pcmanfm >/dev/null 2>&1; then
        pcmanfm --desktop --profile LXDE-pi &
    elif command -v nautilus >/dev/null 2>&1; then
        nautilus --no-default-window &
    fi

    # Start panel
    if command -v lxpanel >/dev/null 2>&1; then
        lxpanel --profile LXDE-pi &
    elif command -v xfce4-panel >/dev/null 2>&1; then
        xfce4-panel &
    fi

    # Start terminal
    if command -v lxterminal >/dev/null 2>&1; then
        lxterminal &
    elif command -v xfce4-terminal >/dev/null 2>&1; then
        xfce4-terminal &
    elif command -v gnome-terminal >/dev/null 2>&1; then
        gnome-terminal &
    else
        xterm &
    fi

    # Keep session alive
    exec /bin/bash
}

#=============================================================================
# Custom Application Startup
#=============================================================================

# Start custom applications (uncomment and modify as needed)

# System monitoring
# htop &

# Network monitoring
# iftop &

# Code editor
# code &

# Web browser
# chromium-browser &

# Remote desktop client
# remmina &

# File synchronization
# syncthing &

#=============================================================================
# Pi Gateway Specific Applications
#=============================================================================

# Start Pi Gateway monitoring dashboard (if available)
# if command -v pi-gateway-dashboard >/dev/null 2>&1; then
#     pi-gateway-dashboard &
# fi

# Start network monitoring tools
# if command -v bandwhich >/dev/null 2>&1; then
#     bandwhich &
# fi

# Start system monitoring
# if command -v btop >/dev/null 2>&1; then
#     btop &
# elif command -v htop >/dev/null 2>&1; then
#     htop &
# fi

#=============================================================================
# Session Management
#=============================================================================

# Enable session saving/restoration (for supported desktop environments)
# export SESSION_MANAGER=""

# Set up D-Bus session bus
if command -v dbus-launch >/dev/null 2>&1; then
    eval "$(dbus-launch --sh-syntax --exit-with-session)"
    export DBUS_SESSION_BUS_ADDRESS
    export DBUS_SESSION_BUS_PID
fi

# Start accessibility services
# if command -v orca >/dev/null 2>&1; then
#     orca --no-setup &
# fi

#=============================================================================
# Performance Optimization
#=============================================================================

# Disable compositing for better performance
export XFCE_COMPOSITOR_BYPASS=1
export GNOME_DISABLE_COMPOSITOR=1

# Disable desktop effects
export DESKTOP_EFFECTS=false

# Set memory limits
ulimit -v 1048576  # 1GB virtual memory limit

# Set nice priority (lower = higher priority)
renice -n 5 $$

#=============================================================================
# Error Handling and Logging
#=============================================================================

# Function to log errors
log_error() {
    echo "$(date): ERROR: $1" >> ~/.vnc/session.log
}

# Function to log info
log_info() {
    echo "$(date): INFO: $1" >> ~/.vnc/session.log
}

# Set up error handling
set -e
trap 'log_error "Session startup failed at line $LINENO"' ERR

log_info "VNC session startup beginning"
log_info "Display: $DISPLAY"
log_info "User: $USER"
log_info "Home: $HOME"

#=============================================================================
# Security Settings
#=============================================================================

# Disable core dumps for security
ulimit -c 0

# Set secure file creation mask
umask 022

# Clear sensitive environment variables
unset SSH_AUTH_SOCK
unset SSH_AGENT_PID

#=============================================================================
# Main Execution
#=============================================================================

# Wait for X server to be ready
echo "Waiting for X server..."
while ! xdpyinfo >/dev/null 2>&1; do
    sleep 1
done

log_info "X server ready, starting desktop environment"

# Start the desktop environment
start_desktop_environment

# If we reach here, the desktop environment failed to start
log_error "Desktop environment failed to start, launching fallback"
start_manual_session

#=============================================================================
# Cleanup and Exit Handling
#=============================================================================

# Function to clean up on exit
cleanup() {
    log_info "VNC session ending, performing cleanup"

    # Kill background processes
    jobs -p | xargs -r kill >/dev/null 2>&1 || true

    # Clean up temporary files
    rm -f /tmp/.X*-lock /tmp/.X11-unix/X* >/dev/null 2>&1 || true

    log_info "VNC session cleanup completed"
}

# Set up exit handler
trap cleanup EXIT

#=============================================================================
# Usage Notes
#=============================================================================

# This startup script provides:
# 1. Automatic desktop environment detection and startup
# 2. Fallback options for manual session management
# 3. Performance optimization for Raspberry Pi
# 4. Error handling and logging
# 5. Security considerations
# 6. Customization options for Pi Gateway use

# To customize:
# 1. Copy this file to ~/.vnc/xstartup
# 2. Make it executable: chmod +x ~/.vnc/xstartup
# 3. Uncomment and modify sections as needed
# 4. Test with: vncserver :1 -localhost no

# Common customizations:
# - Add your favorite applications to startup
# - Modify desktop background and theme
# - Adjust performance settings for your Pi model
# - Enable specific accessibility features
# - Configure session management preferences