# Pi Gateway WireGuard Client Configuration Template
# Secure VPN client settings for connecting to Pi Gateway
#
# Usage: Customize and import into WireGuard client applications
# Generated by Pi Gateway WireGuard Setup Script

#=============================================================================
# Client Interface Configuration
#=============================================================================

[Interface]
# Client private key (unique for each client)
# Generate with: wg genkey
PrivateKey = YOUR_CLIENT_PRIVATE_KEY

# Client VPN IP address (unique within VPN network)
# Server assigns from 10.13.13.2-254 range
Address = 10.13.13.2/32

# DNS servers to use when connected to VPN
# Cloudflare DNS for privacy and performance
DNS = 1.1.1.1, 1.0.0.1

# Alternative DNS options:
# Google DNS: 8.8.8.8, 8.8.4.4
# Quad9 DNS: 9.9.9.9, 149.112.112.112
# Pi-hole (if installed): 10.13.13.1

#=============================================================================
# Server Peer Configuration
#=============================================================================

[Peer]
# Pi Gateway server public key
PublicKey = YOUR_SERVER_PUBLIC_KEY

# Server endpoint (external IP or Dynamic DNS hostname)
# Replace with your actual external IP or DDNS hostname
Endpoint = your-hostname.duckdns.org:51820

# Traffic to route through VPN
# 0.0.0.0/0, ::/0 = All traffic (full tunnel)
AllowedIPs = 0.0.0.0/0, ::/0

# Keep connection alive (important for mobile clients)
# Sends keepalive packet every 25 seconds
PersistentKeepalive = 25

#=============================================================================
# Alternative AllowedIPs Configurations
#=============================================================================

# Split tunneling options (uncomment one and comment out full tunnel above):

# Route only homelab traffic through VPN:
# AllowedIPs = 10.13.13.0/24, 192.168.1.0/24

# Route only specific services through VPN:
# AllowedIPs = 10.13.13.1/32

# Route specific external services through VPN:
# AllowedIPs = 10.13.13.0/24, 8.8.8.8/32, 1.1.1.1/32

#=============================================================================
# Platform-Specific Settings
#=============================================================================

# Windows-specific settings (uncomment if needed):
# BlockDNS = true          # Block DNS leaks
# MTU = 1420              # Optimize for Windows

# macOS-specific settings (uncomment if needed):
# MTU = 1380              # Optimize for macOS

# Mobile-specific settings (already configured above):
# PersistentKeepalive = 25 # Essential for mobile connections

#=============================================================================
# Configuration Examples by Use Case
#=============================================================================

# Example 1: Full VPN Tunnel (Maximum Privacy)
# - All traffic routed through Pi Gateway
# - Appears to internet as coming from home IP
# - Useful for: Public WiFi, geo-blocking, privacy
# Configuration: Use AllowedIPs = 0.0.0.0/0, ::/0 (default above)

# Example 2: Homelab Access Only (Split Tunnel)
# - Only homelab traffic routed through VPN
# - Internet traffic uses local connection
# - Useful for: Remote work, accessing home servers
# Configuration: AllowedIPs = 10.13.13.0/24, 192.168.1.0/24

# Example 3: Selective Routing
# - Only specific hosts/services through VPN
# - Most traffic uses local connection
# - Useful for: Accessing specific home services
# Configuration: AllowedIPs = 10.13.13.1/32, 192.168.1.100/32

#=============================================================================
# Client Installation Instructions
#=============================================================================

# Windows:
# 1. Download WireGuard for Windows from wireguard.com
# 2. Install and run as administrator
# 3. Click "Add Tunnel" → "Add empty tunnel"
# 4. Replace default config with this file content
# 5. Click "Activate"

# macOS:
# 1. Download WireGuard from Mac App Store
# 2. Click "+" → "Add from file"
# 3. Select this configuration file
# 4. Toggle connection on/off

# Linux:
# 1. Install WireGuard: sudo apt install wireguard
# 2. Copy this file to /etc/wireguard/wg0.conf
# 3. Start connection: sudo wg-quick up wg0
# 4. Stop connection: sudo wg-quick down wg0

# Android:
# 1. Install WireGuard from Google Play Store
# 2. Tap "+" → "Scan from QR code" or "Create from file"
# 3. Import this configuration
# 4. Toggle connection

# iOS:
# 1. Install WireGuard from App Store
# 2. Tap "+" → "Scan QR code" or "Create from file"
# 3. Import this configuration
# 4. Toggle connection

#=============================================================================
# Security and Best Practices
#=============================================================================

# Key Management:
# - Never share private keys
# - Each device should have unique keys
# - Rotate keys annually for security
# - Store backups securely (encrypted)

# Connection Security:
# - Verify server public key matches
# - Use strong endpoint authentication
# - Monitor for unusual connection patterns
# - Disconnect when not needed

# Network Security:
# - Disable other VPN clients while connected
# - Check for DNS leaks: https://dnsleaktest.com
# - Verify IP address: https://whatismyipaddress.com
# - Test connectivity regularly

#=============================================================================
# Troubleshooting
#=============================================================================

# Connection Issues:
# 1. Verify endpoint address is correct
# 2. Check router port forwarding (51820)
# 3. Confirm firewall allows WireGuard traffic
# 4. Test from different networks

# Performance Issues:
# 1. Try different MTU values (1280, 1420, 1500)
# 2. Check network latency to server
# 3. Monitor bandwidth usage
# 4. Verify server resources

# DNS Issues:
# 1. Test different DNS servers
# 2. Check for DNS leaks
# 3. Verify DNS resolution works
# 4. Try flushing DNS cache

# Mobile-Specific Issues:
# 1. Enable "Always-on VPN" if available
# 2. Check battery optimization settings
# 3. Verify background app refresh
# 4. Test on different mobile networks

#=============================================================================
# Advanced Features
#=============================================================================

# Pre-shared Key (additional security):
# Uncomment and add PSK for quantum-resistant security
# PresharedKey = GENERATE_WITH_WG_GENPSK

# Custom MTU (performance tuning):
# Uncomment and adjust if experiencing connectivity issues
# MTU = 1420

# Custom routing table (advanced):
# Uncomment for complex routing scenarios
# Table = off

#=============================================================================
# Monitoring and Diagnostics
#=============================================================================

# Connection Status:
# - Check interface: ip addr show wg0 (Linux)
# - Show peers: sudo wg show (Linux)
# - Connection logs: Windows Event Viewer / macOS Console

# Network Testing:
# - Ping VPN gateway: ping 10.13.13.1
# - Test internet: ping 8.8.8.8
# - Check public IP: curl ifconfig.me
# - DNS test: nslookup google.com

# Performance Testing:
# - Speed test: speedtest.net
# - Latency test: ping google.com
# - Throughput test: iperf3 to server

#=============================================================================
# Multiple Server Configuration
#=============================================================================

# If you have multiple Pi Gateway servers, create separate
# configuration files for each:
# - home.conf (main home server)
# - office.conf (office Pi Gateway)
# - backup.conf (backup server)

# Example for multiple servers:
# Copy this template and modify:
# - Different endpoint addresses
# - Different server public keys
# - Different allowed IPs ranges
# - Different client IP addresses