# Pi Gateway WireGuard Server Configuration Template
# Security-hardened VPN configuration for Raspberry Pi homelab
#
# Usage: Copy this file to /etc/wireguard/wg0.conf and customize as needed
# Generated by Pi Gateway WireGuard Setup Script

#=============================================================================
# Server Configuration
#=============================================================================

[Interface]
# Server private key (generate with: wg genkey)
PrivateKey = YOUR_SERVER_PRIVATE_KEY

# Server VPN IP address and subnet
Address = 10.13.13.1/24

# WireGuard listening port (configure port forwarding on router)
ListenPort = 51820

# DNS servers provided to VPN clients
DNS = 1.1.1.1, 1.0.0.1

# Post-up script: Configure NAT and routing when VPN starts
# Replace 'eth0' with your primary network interface
PostUp = iptables -A FORWARD -i %i -j ACCEPT; iptables -A FORWARD -o %i -j ACCEPT; iptables -t nat -A POSTROUTING -o eth0 -j MASQUERADE
PostUp = ip6tables -A FORWARD -i %i -j ACCEPT; ip6tables -A FORWARD -o %i -j ACCEPT; ip6tables -t nat -A POSTROUTING -o eth0 -j MASQUERADE

# Post-down script: Remove NAT and routing rules when VPN stops
PostDown = iptables -D FORWARD -i %i -j ACCEPT; iptables -D FORWARD -o %i -j ACCEPT; iptables -t nat -D POSTROUTING -o eth0 -j MASQUERADE
PostDown = ip6tables -D FORWARD -i %i -j ACCEPT; ip6tables -D FORWARD -o %i -j ACCEPT; ip6tables -t nat -D POSTROUTING -o eth0 -j MASQUERADE

#=============================================================================
# Client Configurations
#=============================================================================

# Client configurations are added here by the wg-add-client script
# Each client gets a unique IP address in the 10.13.13.x range

# Example client configuration (remove this comment block):
# [Peer]
# PublicKey = CLIENT_PUBLIC_KEY
# AllowedIPs = 10.13.13.2/32

#=============================================================================
# Configuration Notes
#=============================================================================

# Network Layout:
# - Server: 10.13.13.1/24 (Pi Gateway)
# - Clients: 10.13.13.2-254/32 (VPN clients)
# - Port: 51820 (default WireGuard port)

# Key Management:
# - Server keys: /etc/wireguard/keys/server/
# - Client keys: /etc/wireguard/keys/clients/
# - Client configs: /etc/wireguard/clients/

# Service Management:
# - Start VPN: sudo systemctl start wg-quick@wg0
# - Stop VPN: sudo systemctl stop wg-quick@wg0
# - Enable on boot: sudo systemctl enable wg-quick@wg0
# - Check status: sudo systemctl status wg-quick@wg0

# Monitoring:
# - Show active connections: sudo wg show
# - Show configuration: sudo wg showconf wg0
# - Check interface: ip addr show wg0

# Client Management:
# - Add client: wg-add-client <name> [ip]
# - Remove client: wg-remove-client <name>
# - List clients: wg-list-clients

#=============================================================================
# Security Best Practices
#=============================================================================

# 1. Key Security:
#    - Keep private keys secure (600 permissions)
#    - Never share or commit private keys to version control
#    - Rotate keys periodically (annually recommended)

# 2. Network Security:
#    - Use strong, unique pre-shared keys for additional security
#    - Limit client access with specific AllowedIPs
#    - Monitor VPN connections regularly

# 3. Firewall Configuration:
#    - Allow only VPN port through firewall
#    - Configure proper routing rules
#    - Block unnecessary forwarding

# 4. Access Control:
#    - Remove unused client configurations
#    - Use descriptive client names
#    - Document client purposes and owners

#=============================================================================
# Troubleshooting
#=============================================================================

# Common Issues:
# - Connection refused: Check port forwarding and firewall rules
# - No internet through VPN: Verify NAT/masquerading configuration
# - Slow performance: Check MTU settings (try MTU = 1420)
# - Key errors: Regenerate keys and update configurations

# Useful Commands:
# - Test configuration: sudo wg-quick up wg0
# - Check routing: ip route show table all
# - Monitor traffic: sudo tcpdump -i wg0
# - Check logs: journalctl -u wg-quick@wg0

# Network Diagnostics:
# - Ping VPN gateway: ping 10.13.13.1
# - Check DNS resolution: nslookup google.com
# - Test internet connectivity: curl https://ipinfo.io/ip

#=============================================================================
# Advanced Configuration Options
#=============================================================================

# To enable these features, uncomment and customize:

# Pre-shared Key (additional security layer):
# PresharedKey = GENERATE_WITH_WG_GENPSK

# Custom MTU (if experiencing connectivity issues):
# MTU = 1420

# Save configuration (automatically save peer changes):
# SaveConfig = true

# Custom routing table (advanced networking):
# Table = 12345

# Custom firewall mark (traffic shaping):
# FwMark = 0x1234

#=============================================================================
# Router Configuration Examples
#=============================================================================

# Most home routers require port forwarding configuration:
# 1. Access router admin interface (usually 192.168.1.1)
# 2. Navigate to Port Forwarding / NAT settings
# 3. Add rule: External Port 51820 → Pi Gateway IP:51820
# 4. Save and restart router if required

# Example configurations for popular router brands:
# - Linksys: Smart Wi-Fi Connect → Port Range Forwarding
# - Netgear: Dynamic DNS → Port Forwarding / Port Triggering
# - ASUS: WAN → Virtual Server / Port Forwarding
# - TP-Link: Advanced → NAT Forwarding → Port Forwarding

#=============================================================================
# Mobile Client Setup
#=============================================================================

# For mobile devices, generate QR codes:
# sudo apt install qrencode
# qrencode -t ansiutf8 < /etc/wireguard/clients/phone.conf

# Mobile apps:
# - Android: WireGuard (official app from Google Play)
# - iOS: WireGuard (official app from App Store)
# - Scan QR code or import configuration file